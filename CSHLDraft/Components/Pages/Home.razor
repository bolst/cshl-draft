@page "/"
@using System.Security.Claims

@inject Data.ICSHLData CSHLData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>


@if (_loading)
{

}
else
{
    <MudStack Wrap="Wrap.Wrap" Spacing="3" AlignItems="AlignItems.Center" StretchItems="StretchItems.None" Row>
        @foreach(var draft in _drafts)
        {
            <div>
                <MudPaper Class="pa-3 d-flex flex-grow-1 flex-column gap-2" Height="200px" Width="300px">
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.body1"><b>@draft.Name.ToUpper()</b></MudText>
                        @if (draft.DTStart is not null)
                        {
                            <MudText Typo="Typo.subtitle1">@draft.DTStart.Value.ToString("f")</MudText>
                        }
                        <DraftStateChip DraftState="@draft.State" />
                        
                    </div>
                    <MudButtonGroup OverrideStyles="false">
                        <AuthorizeView>
                            @if (_currentUser is not null && draft.CanUserModifyDraft(_currentUser.id) || context.User.IsInRole("admin"))
                            {
                                <MudButton Href="@($"/draft/config?draft={draft.Id}")" Color="Color.Warning">Edit</MudButton>
                            }
                        </AuthorizeView>
                        
                        <AuthorizeView>
                            @if (_currentUser is not null && draft.CanUserDraft(_currentUser.id) || context.User.IsInRole("admin"))
                            {
                                <MudButton Href="@($"/draft/{draft.Id}")" Color="Color.Primary" Disabled="draft.State != Data.DraftState.Live">Draft Tool</MudButton>
                            }
                        </AuthorizeView>
                        
                        <MudButton Href="@($"/watch?draft={draft.Id}")" Color="Color.Info" Disabled="draft.State != Data.DraftState.Live">Watch</MudButton>
                    </MudButtonGroup>
                </MudPaper>
            </div>
        }

        <AuthorizeView>
            <MudLink Underline="Underline.Hover" OnClick="CreateNewDraft">
                <MudPaper Class="pa-3 d-flex align-center justify-center flex-grow-1 flex-column gap-2" Height="150px" Width="200px">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Add" />
                        <MudText Typo="Typo.h6">New Draft</MudText>
                    </div>
                </MudPaper>
            </MudLink>
        </AuthorizeView>
    </MudStack>
}


@code {

    private Data.CSHLAccount? _currentUser;
    
    private bool _loading;

    private IEnumerable<Data.CSHLDraft> _drafts = [];


    protected override async Task OnInitializedAsync()
    {
        _drafts = await CSHLData.GetDraftsAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var state = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = await CSHLData.GetAccountByEmailAsync(state.GetEmail());
        
        StateHasChanged();
    }

    private async Task CreateNewDraft()
    {
        var dialog = await DialogService.ShowAsync<NewDraftDialog>();
        var result = await dialog.Result;

        if (result?.Data is not Data.CSHLDraft draft) return;

        var newDraft = await CSHLData.CreateDraftAsync(draft, _currentUser!.id);

        if (newDraft is null)
        {
            // TODO: handle
            return;
        }

        Navigation.NavigateTo($"/draft/{newDraft.Id}");
    }
}