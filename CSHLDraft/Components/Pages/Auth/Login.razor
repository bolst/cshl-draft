@page "/login"

@namespace CSHLDraft.Components.Pages

@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Utilities

@attribute [AllowAnonymous]

@inject NavigationManager Navigation
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject Supabase.Client SBClient

<div class="pa-6 py-10 d-flex align-center" style="@ContainerStyle">
    @if (_authCheckCompleted)
    {
        <MudGrid>
            <MudItem xs="12" md="6" Class="d-flex align-center justify-center">
                &nbsp;
                <div>
                    <MudText Typo="Typo.h3" Style="color: white"><b>Login</b></MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-6 px-10">
                    <LoginForm OnSubmit="OnFormSubmit"/>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Error">@errorMessage</MudText>
                    }

                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</div>


@code {

    [SupplyParameterFromQuery] 
    public string? ReturnUrl { get; set; }

    private string ContainerStyle => new StyleBuilder()
    .AddStyle("height", "85vh")
    .AddStyle("background-image", "linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://ffcghkodqzdpgfmzrmci.supabase.co/storage/v1/object/public/brand//cshl-login.jpg')")
    .AddStyle("background-size", "cover")
    .AddStyle("background-position", "center center")
    .ToString();

    private string? errorMessage;
    private bool _authCheckCompleted;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await SBClient.Auth.RetrieveSessionAsync();
        if (SBClient.Auth.CurrentUser is not null)
        {
            Navigation.NavigateTo(ReturnUrl ?? "/");
            return;
        }

        _authCheckCompleted = true;
        StateHasChanged();
    }

    private async Task OnFormSubmit(Data.LoginFormModel form)
    {
        errorMessage = null;

        errorMessage = await CustomAuthenticationStateProvider.LoginAsync(form);

        if (string.IsNullOrEmpty(errorMessage))
        {
            Navigation.NavigateTo(ReturnUrl ?? "/");
        }
        
        StateHasChanged();

    }
    

}