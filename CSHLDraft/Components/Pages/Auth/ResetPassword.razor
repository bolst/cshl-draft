@page "/passreset"

@namespace CSHLDraft.Components.Pages

@using Supabase.Gotrue
@using Supabase.Gotrue.Exceptions

@inject NavigationManager Navigation
@inject Supabase.Client SBClient
@inject ISnackbar Snackbar

<PageTitle>Reset Password</PageTitle>

<MudText Typo="Typo.h6">Reset Password</MudText>

<div class="d-flex align-center justify-center mt-4" style="width: 100%">
    <MudStack>
        <MudTextField @bind-Value="_password" Label="New password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password" />
        <MudTextField @bind-Value="_confirmPassword" Label="Confirm password" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="InputType.Password" />
        <MudButton Color="Color.Primary" OnClick="OnClick" Variant="Variant.Filled">Reset</MudButton>
    </MudStack>
</div>

@code {

    [SupplyParameterFromQuery] 
    public string? TokenHash { get; set; }
    
    [SupplyParameterFromQuery]
    public string? RedirectTo { get; set; }
    
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var status = await TryLogUserIn();
        if (!status)
        {
            Navigation.NavigateTo("/");
        }
    }


    private async Task<bool> TryLogUserIn()
    {
        if (string.IsNullOrEmpty(TokenHash))
        {
            Snackbar.Add("Missing params...", Severity.Info);
            return false;
        }

        try
        {
            var session = await SBClient.Auth.VerifyTokenHash(TokenHash);
            if (session is null || session.Expired())
            {
                return false;
            }
        }
        catch (Exception e)
        {
            // Snackbar.Add("Something went wrong...", Severity.Error);
        }

        return true;
    }
    

    private async Task OnClick()
    {
        var status = Validate();
        if (!status) return;
        
        if (SBClient.Auth.CurrentSession is null || SBClient.Auth.CurrentSession.Expired())
        {
            Snackbar.Add("Invalid session... you need a new reset link.", Severity.Error);
            await Task.Delay(3000);
            Navigation.NavigateTo("/");
            return;
        }

        try
        {
            await SBClient.Auth.Update(new UserAttributes
            {
                Password = _password
            });

            Snackbar.Add("Done", Severity.Success);

            await Task.Delay(1000);

            Navigation.NavigateTo(RedirectTo ?? "/", true);
        }
        catch (GotrueException ex)
        {
            switch (ex.StatusCode)
            {
                case 422:
                    Snackbar.Add("You can't use an old password again!", Severity.Error);
                    break;
                default:
                    Snackbar.Add("Something went wrong...", Severity.Error);
                    break;
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Something went wrong...", Severity.Error);
            return;
        }

    }


    private bool Validate()
    {
        if (_password.Length < 6 || _confirmPassword.Length < 6)
        {
            Snackbar.Add("Gotta be more than 6 letters dude", Severity.Error);
            return false;
        }

        if (_password != _confirmPassword)
        {
            Snackbar.Add("Passwords must be equal", Severity.Error);
            return false;
        }

        return true;
    }


}