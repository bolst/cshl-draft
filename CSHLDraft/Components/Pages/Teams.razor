@page "/teams/{DraftIdStr}"

@inject Data.ICSHLData CSHLData
@inject NavigationManager Navigation

@if (_draft is not null)
{
    <PageTitle>Teams - @_draft.Name</PageTitle>

    <div class="d-flex align-center justify-center flex-wrap flex-column" style="width: 100%">
        <MudChipSet T="Data.CSHLTeam" SelectedValue="_selectedTeam" SelectedValueChanged="SelectedTeamChanged" SelectionMode="SelectionMode.ToggleSelection" Variant="Variant.Text" Size="Size.Large">
            @foreach (var team in _teams)
            {
                var color = _selectedTeam == team ? "#FFFFFF" : team.PrimaryHex;
                var backgroundColor = team.PrimaryHex + (_selectedTeam == team ? string.Empty : "44");
                <MudChip Value="@team" Style="@($"color: {color}; background-color: {backgroundColor}")">
                    <AvatarContent>
                        <MudAvatar>
                            <MudImage Src="@team.LogoUrl" Height="15" ObjectFit="ObjectFit.Contain" />
                        </MudAvatar>
                    </AvatarContent>
                    <ChildContent>
                        <b>@team.Name</b>
                    </ChildContent>
                </MudChip>
            }
        </MudChipSet>
    </div>
    
    @if (_selectedTeam is null)
    {
        <div class="d-flex align-center justify-center" style="width: 100%; height: 50vh">
            <MudText Typo="Typo.h6">Select a team to see their players</MudText>
        </div>
    }
    else
    {
        <div class="px-md-20 mx-md-20 my-8">
            <MudDataGrid Items="_selectedPlayers" Height="60vh" FixedHeader Striped>
                <Columns>
                    <PropertyColumn Property="x => x.PlayerName.ToUpper()" Title="Player" CellStyle="font-weight: bold" />
                </Columns>
            </MudDataGrid>
        </div>
    }
}


@code {

    
    [Parameter]
    public required string DraftIdStr { get; set; }

    private Guid _draftId;

    private Data.CSHLDraft? _draft;

    private IEnumerable<Data.CSHLTeam> _teams = [];
    private IEnumerable<Data.CSHLDraftPickDetail> _draftPicks = [];

    private Data.CSHLTeam? _selectedTeam;
    private IEnumerable<Data.CSHLDraftPickDetail> _selectedPlayers = [];

    protected override async Task OnParametersSetAsync()
    {
        if (!Guid.TryParse(DraftIdStr, out _draftId))
        {
            Navigation.NavigateTo("/");
            return;
        }
        
        if (_draft is not null && _draft.Id == _draftId) return;

        await LoadDataAsync();
    }


    private async Task LoadDataAsync()
    {
        _draft = await CSHLData.GetDraftByIdAsync(_draftId);
        if (_draft is null)
        {
            Navigation.NavigateTo("/");
            return;
        }
        
        _teams = await CSHLData.GetTeamsInDraftAsync(_draft.Id);
        _draftPicks = await CSHLData.GetDraftPicksAsync(_draft.Id);
    }


    private void SelectedTeamChanged(Data.CSHLTeam? value)
    {
        _selectedTeam = value;
        _selectedPlayers = _selectedTeam is null ? [] : _draftPicks.Where(x => x.team_id == _selectedTeam.Id).OrderBy(x => x.PlayerName);
    }

}