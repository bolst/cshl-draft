@page "/draft/{DraftId:int}"

@inject Data.ICSHLData CSHLData
@inject Data.CsvParser ExcelService
@inject NavigationManager Navigation


@if (_loading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" Width="300px" />
}
else
{
    if (_draft is null)
    {
        <PageTitle>Draft</PageTitle>
        <MudText Typo="Typo.h6">Couldn't find a draft with that ID :(</MudText>
    }
    else
    {
        <PageTitle>@_draft.Name.ToUpper()</PageTitle>
        <MudText Class="mt-2" Typo="Typo.h4">@_draft.Name.ToUpper()</MudText>
        <MudDivider />


        <MudGrid>
            <MudItem xs="4">
                <MudDataGrid Items="_teams" Height="60vh" SortMode="SortMode.None" ShowColumnOptions="false" Filterable="false" Groupable="false" FixedHeader FixedFooter>
                    <ToolBarContent>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadTeamsFile" Accept="csv">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Upload Teams CSV
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudImage Src="@context.Item.LogoUrl" Height="30" />
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Name" Title="Team" />
                        <PropertyColumn Property="x => x.Pick" Title="Pick" />
                    </Columns>
                </MudDataGrid>
            </MudItem>
            <MudItem xs="6">
                <MudDataGrid Items="_players" Height="60vh" SortMode="SortMode.None" ShowColumnOptions="false" Filterable="false" Groupable="false" FixedHeader FixedFooter>
                    <ToolBarContent>
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadPlayersFile" Accept="csv">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Upload Players CSV
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudImage Src="@context.Item.HeadshotUrl" Height="30" />
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Name" Title="Player" />
                        <PropertyColumn Property="x => x.Birthday" Title="DOB" />
                        <PropertyColumn Property="x => x.Height" Title="Height" />
                        <PropertyColumn Property="x => x.Weight" Title="Weight" />
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>



    }
}


@code {

    [Parameter]
    public required int DraftId { get; set; }

    private bool _loading;
    private string _errorMessage = string.Empty;

    private Data.CSHLDraft? _draft;
    private IEnumerable<Data.CSHLPlayer> _players = [];
    private IEnumerable<Data.CSHLTeam> _teams = [];

    protected override async Task OnParametersSetAsync()
    {
        if (_draft is not null && _draft.Id == DraftId) return;

        _loading = true;
        await InvokeAsync(StateHasChanged);

        _draft = await CSHLData.GetDraftByIdAsync(DraftId);
        if (_draft is not null)
        {
            _players = await CSHLData.GetPlayersInDraftAsync(DraftId);
            _teams = await CSHLData.GetTeamsInDraftAsync(DraftId);
        }

        _loading = false;
        await InvokeAsync(StateHasChanged);
    }



    private async Task UploadTeamsFile(IBrowserFile file)
    {
        var data = await ExcelService.ParseCsvAsync<Data.InputTeam>(file);

        if (!data.Success)
        {
            _errorMessage = data.Message;
            return;
        }
    }

    private async Task UploadPlayersFile(IBrowserFile file)
    {
        var upload = await ExcelService.ParseCsvAsync<Data.InputPlayer>(file);

        if (!upload.Success)
        {
            _errorMessage = upload.Message;
            return;
        }

        await CSHLData.SetDraftPlayersAsync(DraftId, upload.Data);

        _players = await CSHLData.GetPlayersInDraftAsync(DraftId);
    }

}
