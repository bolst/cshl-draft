@page "/draft/{DraftIdStr}"

@attribute [Authorize]

@using System.Security.Claims
@inherits HubComponentBase

@inject Data.ICSHLData CSHLData
@inject Data.CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager Navigation


<PageTitle>Draft Tool</PageTitle>

<MudGrid Spacing="2">
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
        <MudItem Class="d-flex align-center" xs="3">
            <MudPaper Width="100%" MaxHeight="90vh" Class="mud-theme-surface" Elevation="3">
                @if (_draft is not null)
                {
                    <DraftRosters Draft="_draft" />
                }
            </MudPaper>
        </MudItem>
    </MudHidden>
    <MudItem Class="d-flex align-center" xs="12" md="7">
        <MudPaper Width="100%" MaxHeight="90vh" Class="mud-theme-surface" Elevation="0">
            @if (_draft is not null)
            {
                <DraftDataGrid Draft="_draft" Disabled="_disabled" />
            }
        </MudPaper>
    </MudItem>
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
        <MudItem Class="d-flex align-center" xs="2">
            <MudPaper Width="100%" MaxHeight="90vh" Class="mud-theme-surface" Elevation="3">
                @if (_draft is not null)
                {
                    <DraftStatus Draft="_draft" />
                }
            </MudPaper>
        </MudItem>
    </MudHidden>
</MudGrid>


@code {
    
    [Parameter]
    public string? DraftIdStr { get; set; }

    private Guid DraftId;

    private bool _canRender;

    private bool _disabled;
    private Data.CSHLDraft? _draft;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(DraftIdStr) || !Guid.TryParse(DraftIdStr, out DraftId))
        {
            Navigation.NavigateTo("/");
            return;
        }

        await LoadDataAsync();

        _canRender = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_canRender) return;

        _canRender = false;
        
        var state = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = await CSHLData.GetAccountByEmailAsync(state.GetEmail());

        if (currentUser is null || _draft is null || !_draft.CanUserDraft(currentUser.id) && !state.User.IsInRole("admin"))
        {
            Navigation.NavigateTo("/", true);
        }
    }


    private async Task LoadDataAsync()
    {
        _draft = await CSHLData.GetDraftByIdAsync(DraftId);
        if (_draft is null) return;

        _disabled = _draft.State != Data.DraftState.Live;
        await InvokeAsync(StateHasChanged);
    }


    protected override void AddHubHandlers()
    {
        Hub.On(Hubs.DraftHub.Events.OnDraftStateChange, async () =>
        {
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        });
    }

}