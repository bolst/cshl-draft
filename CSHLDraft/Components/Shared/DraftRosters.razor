@inherits HubComponentBase

@inject Data.ICSHLData CSHLData

<MudStack AlignItems="AlignItems.Center">
    @if (_pick is not null)
    {
        <MudStack Class="pt-2" Justify="Justify.Center" Row>
            @if (_pick.team_id == _selectedTeam?.Id)
            {
                <MudText Typo="Typo.h5"><b>Round @_pick.Round, Pick @_pick.RoundPick</b></MudText>
            }
            else
            {
                <MudText Typo="Typo.h5"><b>&nbsp;</b></MudText>
            }
        </MudStack>

        if (_selectedTeam is not null)
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="5" Row>
                <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Row>
                    <MudImage Src="@_selectedTeam.LogoUrl" Height="70"/>
                    <MudText Typo="Typo.h6"><b>@_selectedTeam.Name</b></MudText>
                </MudStack>
            </MudStack>
        }
        
        <MudChipSet 
            T="Data.CSHLTeam"
            Color="Color.Transparent"
            SelectedValue="_selectedTeam" 
            SelectedValueChanged="OnSelectedTeamChange"
            SelectionMode="SelectionMode.SingleSelection"
            SelectedColor="Color.Dark"
            Variant="Variant.Text"
            Size="Size.Small">
            @foreach (var team in _draftTeams)
            {
                <MudChip Value="@team">
                    <MudImage Src="@team.LogoUrl" Width="30" />
                </MudChip>
            }
        </MudChipSet>
    }
    
    <MudDivider />
    
    @if (_roster is not null)
    {
        <MudSimpleTable Style="height: 63vh; width: 100%" FixedHeader Dense Striped>
            <thead>
            <tr>
                <th style="width: 50px"></th>
                <th>PLAYERS (@_roster.Count())</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var player in _roster)
                {
                    <tr>
                        <td><MudImage Src="@player.HeadshotUrl" Height="20" /></td>
                        <td>@player.Name</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
</MudStack>

@code {
    
    [Parameter, EditorRequired]
    public required Data.CSHLDraft Draft { get; set; }

    private Guid? _draftId;
    
    private IEnumerable<Data.CSHLPlayer>? _roster;
    private Data.CSHLDraftPickDetail? _pick;
    private Data.CSHLTeam? _selectedTeam;
    private IEnumerable<Data.CSHLTeam> _draftTeams = [];


    protected override async Task OnParametersSetAsync()
    {
        if (_draftId is not null && Draft.Id == _draftId) return;
        
        _draftId = Draft.Id;
        
        _draftTeams = await CSHLData.GetTeamsInDraftAsync(Draft.Id);
        await LoadDataAsync();
    }
    
    
    private async Task LoadDataAsync()
    {
        _pick = await CSHLData.GetCurrentPickAsync(Draft.Id);
        
        if (_pick is not null)
        {
            _roster = await CSHLData.GetRosterByTeamIdAsync(_pick.team_id);
            _selectedTeam = _draftTeams.FirstOrDefault(x => x.Id == _pick.team_id);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSelectedTeamChange(Data.CSHLTeam? selectedTeam)
    {
        _selectedTeam = selectedTeam;
        _roster = _selectedTeam is null ? [] : await CSHLData.GetRosterByTeamIdAsync(_selectedTeam.Id);
    }

    protected override void AddHubHandlers()
    {
        Hub.On(Hubs.DraftHub.Events.OnDraftUpdate, async () => await LoadDataAsync());
    }

}