@namespace CSHLDraft.Components.Shared

@inherits HubComponentBase

@inject Data.ICSHLData CSHLData

<MudDialog>
    <TitleContent>
        <MudStack AlignItems="AlignItems.Center" Row>
            <MudText Typo="Typo.h5">@Player.Name (@Player.Birthday.ToString("yyyy"))</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="8" Row>
            <div>
                <MudImage Src="@Player.HeadshotUrl" Width="300"/>
            </div>
            <div>
                <MudText Class="my-4" Typo="Typo.h6">Height - @Player.Height</MudText>
                <MudText Class="my-4" Typo="Typo.h6">Weight - @Player.Weight</MudText>
            </div>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton
            Class="mud-theme-dark"
            Variant="Variant.Filled"
            OnClick="OnDraftPlayer"
            Disabled="_pick is not null">
            @if (_pick is not null)
            {
                <MudText Typo="Typo.button">Already drafted</MudText>
            }
            else
            {
                <MudText Typo="Typo.button">Draft</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter, EditorRequired]
    public required Data.CSHLPlayer Player { get; set; }

    private Data.CSHLPlayer? _player;
    private Data.CSHLDraftPickDetail? _pick;

    protected override async Task OnParametersSetAsync()
    {
        if (_player is not null && Player == _player) return;

        _player = Player;
        _pick = await CSHLData.GetPlayerDraftPickAsync(Player.draft_id, Player.Id);
    }
    
    private void OnDraftPlayer() => MudDialog.Close(DialogResult.Ok(true));

    private void OnCancel() => MudDialog.Cancel();
    
    protected override void AddHubHandlers()
    {
        Hub.On(Hubs.DraftHub.Events.OnDraftUpdate, async () =>
        {
            _pick = await CSHLData.GetPlayerDraftPickAsync(Player.draft_id, Player.Id);
            await InvokeAsync(StateHasChanged);
        });
    }

}