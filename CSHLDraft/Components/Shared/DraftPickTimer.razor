@inherits HubComponentBase

@inject IJSRuntime JS
@inject Data.ICSHLData CSHLData

<div class="d-flex justify-center">
    <MudStack Class="px-1" AlignItems="AlignItems.Center">
        <MudText Color="Color.Secondary" Typo="Typo.h1" HtmlTag="i"><b><span id="timersec"></span></b></MudText>
    </MudStack>
</div>

<AuthorizeView Roles="admin">
    <MudStack Justify="Justify.Center" Spacing="0" Row>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Secondary" OnClick="(() => StartTimer(true))" Disabled="_disabled" />
        @if (_paused)
        {
            <MudIconButton Icon="@Icons.Material.Filled.PlayCircleOutline" Color="Color.Primary" OnClick="(() => ResumeTimer(true))" Disabled="_disabled" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.PauseCircleOutline" Color="Color.Secondary" OnClick="(() => PauseTimer(true))" Disabled="_disabled" />
        }
    </MudStack>
</AuthorizeView>

@code {

    [Parameter, EditorRequired]
    public required Data.CSHLDraft Draft { get; set; }

    private Guid? _draftId;
    private bool _firstRender;
    
    private bool _disabled;
    private bool _paused;
    private const int TIME_LIMIT_SEC = 120;

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Draft.State == Data.DraftState.Live)
            {
                await StartTimer();
            }
            else
            {
                _disabled = true;
            }
        }
    }

    private async Task StartTimer(bool sendHub = false)
    {
        _paused = false;
        await JS.InvokeVoidAsync("startTimer", TIME_LIMIT_SEC);

        if (sendHub)
            await Hub.SendAsync(nameof(Hubs.DraftHub.PushTimerStateChange), "startTimer");
    }

    private async Task PauseTimer(bool sendHub = false)
    {
        _paused = true;
        await JS.InvokeVoidAsync("pauseTimer");

        if (sendHub)
            await Hub.SendAsync(nameof(Hubs.DraftHub.PushTimerStateChange), "pauseTimer");
    }

    private async Task ResumeTimer(bool sendHub = false)
    {
        _paused = false;
        await JS.InvokeVoidAsync("resumeTimer");

        if (sendHub)
            await Hub.SendAsync(nameof(Hubs.DraftHub.PushTimerStateChange), "resumeTimer");
    }

    protected override void AddHubHandlers()
    {
        Hub.On(Hubs.DraftHub.Events.OnDraftUpdate, async () =>
        {
            await StartTimer();
        });

        Hub.On(Hubs.DraftHub.Events.OnDraftStateChange, async () =>
        {
            Draft = (await CSHLData.GetDraftByIdAsync(Draft.Id))!;

            if (Draft.State == Data.DraftState.Inactive)
            {
                await StartTimer();
                await PauseTimer();
                _disabled = true;
            }
            else
            {
                await StartTimer();
                _disabled = false;
            }

            await InvokeAsync(StateHasChanged);
        });

        Hub.On<string>(Hubs.DraftHub.Events.OnTimerStateChange, async (jsCommand) =>
        {
            switch (jsCommand)
            {
                case "startTimer":
                    await StartTimer();
                    break;
                case "pauseTimer":
                    await PauseTimer();
                    break;
                case "resumeTimer":
                    await ResumeTimer();
                    break;
            }
        });
    }
}