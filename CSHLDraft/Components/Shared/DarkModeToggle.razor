@inject ILocalStorageService LocalStorage

@if (_visible)
{
    <MudToggleIconButton 
        Toggled="IsDarkMode"
        ToggledChanged="OnDarkModeToggled"
        Icon="@Icons.Material.Filled.LightMode" 
        Color="Color.Tertiary"
        ToggledIcon="@Icons.Material.Filled.DarkMode"
        ToggledColor="Color.Tertiary"
        Size="Size.Small" />
}
    
    
@code {

    [Parameter] 
    public bool IsDarkMode { get; set; }

    [Parameter] 
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    private bool _visible;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _visible = true;
        
        // get from local storage
        var value = await GetFromLocalStorage();
        if (value != IsDarkMode)
            await OnDarkModeToggled(value);
        
        StateHasChanged();
    }


    private async Task OnDarkModeToggled(bool value)
    {
        if (value == IsDarkMode) return;

        IsDarkMode = value;
        IsDarkModeChanged.InvokeAsync(value);

        // save to local storage
        await PersistToLocalStorage(value);
    }


    private async Task<bool> GetFromLocalStorage()
    {
        try
        {
            var value = await LocalStorage.GetItemAsync<bool>("darkmode");
            return value;
        }
        catch
        {
            return false;
        }
    }


    private async Task PersistToLocalStorage(bool value)
    {
        try
        {
            await LocalStorage.SetItemAsync("darkmode", value);
        }
        catch { }
    }
    
}