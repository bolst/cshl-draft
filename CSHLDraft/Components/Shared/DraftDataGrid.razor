@inherits HubComponentBase

@inject Data.ICSHLData CSHLData
@inject IDialogService DialogService
@inject Supabase.Client SBClient

@if (_players is not null)
{
    <MudDataGrid
        T="Data.CSHLPlayer"
        Items="_filteredPlayers"
        Height="calc(90vh - 4rem)"
        QuickFilter="QuickFilter"
        ShowColumnOptions="false"
        FixedHeader
        Dense>
        <ToolBarContent>
            <AuthorizeView Roles="admin">
                <MudMenu
                    Label="Actions"
                    Variant="Variant.Filled"
                    EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
                    IconColor="Color.Error"
                    Dense>
                    <MudMenuItem >
                        <DraftStateControl DraftId="Draft.Id" FullWidth />
                    </MudMenuItem>
                    <MudMenuItem>
                        <MudButton Color="Color.Error" OnClick="OnResetDraft" FullWidth>Reset</MudButton>
                    </MudMenuItem>
                </MudMenu>
            </AuthorizeView>
            
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Variant="Variant.Outlined"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Margin="Margin.Dense" Immediate />
        </ToolBarContent>

        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <AuthorizeView Roles="captain,admin" Context="authContext">
                        @{
                            var disabled = authContext.User.IsInRole("admin") ? Disabled : !UserCanPick;
                        }
                        <MudButton
                            Color="Color.Default"
                            Variant="Variant.Filled"
                            OnClick="@(() => OnPlayerDrafted(context.Item))"
                            Disabled="disabled">DRAFT</MudButton>
                    </AuthorizeView>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" Title="Name" CellStyle="font-weight: bold" />
            <PropertyColumn Property="@(x => x.Birthday.ToString("yyyy"))" Title="Birth year" />
            <PropertyColumn Property="x => x.Height" Title="Ht" Sortable="false" />
            <PropertyColumn Property="x => x.Weight" Title="Wt" Sortable="false" />
        </Columns>
    </MudDataGrid>
}

<MudOverlay @bind-Visible="_loading" DarkBackground Absolute>
    <MudProgressCircular Indeterminate />
</MudOverlay>


@code {
    
    [Parameter, EditorRequired]
    public required Data.CSHLDraft Draft { get; set; }

    private Guid? _draftId;
    
    [Parameter]
    public bool Disabled { get; set; }
    
    private IEnumerable<Data.CSHLPlayer>? _players;
    private HashSet<Data.CSHLPlayer> _filteredPlayers = new();
    private Data.CSHLDraftPickDetail? _currentPick;

    private bool _loading;
    private string _searchString = string.Empty;
    
    private Data.CSHLAccount? _currentUser;
    
    private bool UserCanPick => _currentPick is not null 
                                && _currentUser is not null 
                                && (_currentPick.gm_account_id is null || _currentPick.gm_account_id == _currentUser.id)
                                && !Disabled;

    protected override async Task OnParametersSetAsync()
    {
        if (_draftId is not null && Draft.Id == _draftId) return;

        _draftId = Draft.Id;
        
        await LoadDataAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var user = SBClient.Auth.CurrentUser;
        if (user?.Email is not null)
        {
            _currentUser = await CSHLData.GetAccountByEmailAsync(user.Email);
        }
    }

    private async Task LoadDataAsync()
    {
        _loading = true;
        await InvokeAsync(StateHasChanged);
        
        _currentPick = await CSHLData.GetCurrentPickAsync(Draft.Id);
        
        _players = await CSHLData.GetDraftAvailablePlayersAsync(Draft.Id);
        _filteredPlayers = new(_players);
        
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task OnResetDraft()
    {
        await CSHLData.ResetDraftAsync(Draft.Id);
        await Hub.SendAsync(nameof(Hubs.DraftHub.PushDraftUpdate));
        
        await LoadDataAsync();
    }

    private async Task OnPlayerDrafted(Data.CSHLPlayer player)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.False,
            FullWidth = false,
        };
        
        var dialog = await DialogService.ShowAsync<DraftPlayerDialog>("Draft Player", new DialogParameters<DraftPlayerDialog>
        {
            { x => x.Player, player },
        }, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            _loading = true;
            await InvokeAsync(StateHasChanged);
            
            _currentPick = await CSHLData.GetCurrentPickAsync(Draft.Id);
            if (_currentPick is not null)
                await CSHLData.DraftPlayerAsync(player, _currentPick);

            await Hub.SendAsync(nameof(Hubs.DraftHub.PushDraftUpdate));
            await LoadDataAsync();
        }
    }

    private Func<Data.CSHLPlayer, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    
    protected override void AddHubHandlers()
    {
        Hub.On(Hubs.DraftHub.Events.OnDraftUpdate, async () => await LoadDataAsync());
    }

}